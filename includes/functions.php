<?php

/**
 * functions.php
 * Contains commonly used functions across the website. See each function 
 * of interest for a more in depth explanation of what it does.
*/

if ( !defined('IN_CCCS') ) {
	exit;
}


/**
 * Sends an error message or warning to the browser. Clears the current
 * display and exits all script execution.
 *
 * @param	define	the type of message, see constants file
 * @param	string	the message to print to the screen
 * @param	int		the line the message or error appears on
 * @param	string	the file the message or error appears on
 * @param	string	the error string generated by the database
 * @param	string	the SQL that generated the error
 *
 * @global	object	the global database handle
 * @global	object	the global template handle
 * @global	array	the currently loaded language
 * @global	array	the database config from the database
 * @global	string	the root path of the pages
 * @global	string	the navigation HTML
 * @global	string	the list of sponsors
 * @global	string	the login form HTML
 * @global	string	the header image HTML
 * @global	string	the list of regions
 *
 * @return	true	always
*/
function cccs_message($message_type, $message_string, $message_line = NULL, $message_file = NULL, $message_sql_error = NULL, $message_sql = NULL) {
	global $db, $t, $lang, $dbconfig, $root_path, $main_body_navigation, $sponsor_list, $login_form, $main_header, $global_region_list;
	
	$file_list = array();
	$file_list = split("[(\\|/)]", $message_file);	// UNIX and windows safe
	$message_file = $file_list[count($file_list)-1];
	
	// first, create a final message
	$final_message = $message_string . ' ' . $lang['On'] . ' ' . $lang['Line'] . ' ' . $message_line . ' ' . $lang['In'] . ' ' . $message_file . '.';
	
	if ( !empty($message_sql) || !empty($message_sql_error) ) {
		$final_message .= '<br /> ' . cccs_fix_sql($message_sql, $message_sql_error);
	}
	
	switch ( $message_type ) {
		case ERROR_CRITICAL: {
			// can't rely on database support, kill any possible connection
			$db->disconnect();
			
			$message_string = stripslashes($message_string);
			die($final_message);
		}
		case ERROR_MESSAGE: {
			// database support is shakey, so don't rely on it, but 
			// don't kill the connection.
			$message_string = stripslashes($message_string);
			
			die($final_message);
		}
		case WARNING_CRITICAL || WARNING_MESSAGE: {
			// database support exists, so use it. take into consideration $message_die
			if ( empty($t) ) {
				$t = new template();
			}
			
			// If not already loaded, load in the header
			if ( !defined('CCCS_PAGE_HEADER') ) {
				include $root_path . 'includes/page_header.php';
			}
			
			$pagination[] = array(NULL, $lang['Error']);
			$content_pagination = make_pagination($pagination);
			
			// Check to see if we are running a production server or not.
			// I have that second part of the conditional because I still want
			// the error loggin in text to be printed even if we are in a 
			// production environment.
			if ( IN_DEBUG == false && $message_type == WARNING_CRITICAL ) {
				$message_sql_error = NULL;
				$message_sql = NULL;
				$message_line = NULL;
				$message_file = NULL;
				$message_string = $lang['Error_default'];
			}
			
			$error_server = NULL;
			if ( !empty($message_sql_error) && !empty($message_sql) ) {
				$t->set_template( load_template('error_message_server') );
				$t->set_vars( array(
					'L_MYSQL_ERROR' => $lang['Mysql_error'],
					'L_SQL_ERROR' => $lang['Sql_error'],
					'ERROR_MYSQL' => stripslashes($message_sql_error),
					'ERROR_SQL' => $message_sql
					)
				);
				$error_server = $t->parse($dbconfig['show_template_name']);
			}
			
			$error_file = NULL;

			if ( !empty($message_line) && !empty($message_file) ) {
				$t->set_template( load_template('error_message_file') );
				$t->set_vars( array(
					'L_ON_LINE' => $lang['On_line'],
					'L_IN_FILE' => $lang['In_file'],
					'ERROR_LINE' => $message_line,
					'ERROR_FILE' => $message_file,
					)
				);
				$error_file = $t->parse($dbconfig['show_template_name']);
			}
			
			$t->set_template( load_template('error_message') );
			$t->set_vars( array(
				'ERROR_TYPE' => ($message_type == WARNING_CRITICAL ? $lang['Warning_criticial'] : $lang['Warning_message'] ),
				'ERROR_MESSAGE' => $message_string,
				'ERROR_FILE' => ( !empty($error_file) ? $error_file : NULL),
				'ERROR_SERVER' => ( !empty($error_server) ? $error_server : NULL)
				)
			);
			$content_error = $t->parse($dbconfig['show_template_name']);
			 
			$t->set_template( load_template('main_body_content') );
			$t->set_vars( array(
				'REGION_LIST' => $global_region_list,
				'CONTENT_PAGINATION' => $content_pagination,
				'CONTENT_TITLE' => NULL,
				'CONTENT_SUBTITLE' => NULL,
				'CONTENT' => $content_error
				)
			);
			$main_body_content = $t->parse($dbconfig['show_template_name']);
			
			if ( !defined('CCCS_PAGE_FOOTER') ) {
				include $root_path . 'includes/page_footer.php';
			}
		}
	}
	
	$db->disconnect();
	exit;
	return true;
}

/**
 * Returns decent looking SQL code for when no database support is present.
 *
 * @param	string	the sql code to be fixed
 * @param	string	the sql message
 *
 * @global	array	the currently loaded language
 *
 * @return	string	the parsed sql
*/
function cccs_fix_sql($sql_code, $sql_message) {
	global $lang;
	
	if ( empty($sql_code) && empty($sql_message) ) {
		return false;
	}
	
	$final_message = $lang['Mysql_said'] . ': ';
	
	if ( !empty($sql_message) ) {
		$sql_message = '<code><strong>' . $sql_message . '</strong></code>';
		$final_message .= $sql_message;
	}
	
	if ( !empty($sql_code) ) {
		$sql_code = nl2br($sql_code);
		$sql_code = '<code><em>' . $sql_code . '</em></code>';
		$final_message .= '<br />' . $sql_code;
	}
	
	return $final_message;
}

/**
 * Loads a template by $template_name. Prints an error if template
 * does not exist.
 *
 * @param	string	the name of the template to load
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language
 *
 * @return	array	the template row from the database
*/
function load_template($template_name, $cache_template = true) {
	global $db, $lang, $templatecache;
	
	if ( empty($template_name) ) {
		return false;
	}
	
	if ( !empty($templatecache[$template_name]) ) {
		// Delete this template from the cache if we no
		// longer want it in there
		if ( $cache_template == false ) {
			unset($templatecache[$template_name]);
		}
		
		return array($template_name, $templatecache[$template_name]);
	} else {
		$sql = "SELECT t.template_name, t.template_code FROM `" . TEMPLATE . "` t 
				WHERE t.template_name = '" . $template_name . "'";
		$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, sprintf($lang['Error_load_template'], $template_name), __LINE__, __FILE__, $db->dberror(), $sql);
		
		$template = $db->getarray($result) or cccs_message(WARNING_MESSAGE, sprintf($lang['Error_load_template'], $template_name) );
		
		if ( $cache_template == true ) {
			$templatecache[$template_name] = $template['template_code'];
		}
		
		$db->freeresult($result);
		
		return $template;
	}
}

/**
 * Returns an HTML title for a page with $title_text as the text.
 * If $is_subtitle is true, the subtitle template is loaded rather
 * than the title template.
 *
 * @param	string	the text of the title
 * @param	boolean	whether or not the title is a subtitle
 *
 * @global	object	the global template handle
 * @global	array	the global database configuration array
 *
 * @return	string	the HTML for the string
*/
function make_title($title_text, $is_subtitle) {
	global $t, $dbconfig;
	
	$title = NULL;
	
	if ( !$is_subtitle ) {
		$t->set_template( load_template('content_title') );
		$t->set_vars( array(
			'CONTENT_TITLE' => stripslashes($title_text)
			)
		);
		$title = $t->parse($dbconfig['show_template_name']);
	} elseif ( $is_subtitle == true ) {
		$t->set_template( load_template('content_subtitle') );
		$t->set_vars( array(
			'CONTENT_SUBTITLE' => stripslashes($title_text)
			)
		);
		$title = $t->parse($dbconfig['show_template_name']);
	}
	
	return $title;
}

/**
 * Returns an HTML small title for a page with $title_text as the text.
 *
 * @param	string	the text of the title
 *
 * @global	object	the global template handle
 * @global	array	the global database configuration array
 *
 * @return	string	the HTML for the string
*/
function make_small_title($title_text) {
	global $t, $dbconfig;
	
	$t->set_template( load_template('strong') );
	$t->set_vars( array(
		'STRONG_TEXT' => $title_text
		)
	);
	$title = $t->parse($dbconfig['show_template_name']);
	
	$t->set_template( load_template('content') );
	$t->set_vars( array(
		'CONTENT' => $title
		)
	);
	
	return $t->parse($dbconfig['show_template_name']);
}

/**
 * Takes an array, $history, that is a history of the page setup.
 * The history is manually set on each page. See function for
 * setup of the $history array.
 *
 * @param	array	the array of pages
 * 
 * @global	object	the global template handle
 * @global	array	the currently loaded language array
 * @global	array	the global database configuration array
 *
 * @return	string	the HTML for the pagination links
*/
function make_pagination($history) {
	global $t, $lang, $dbconfig, $usercache;
	
	// Change this to what you want it to be
	$spacer = ' &raquo; ';
	$pagination = NULL;
	
	$t->set_template( load_template('pagination_contact') );
	$t->set_vars( array(
		'L_CONTACT_TOLL_FREE' => $lang['Contact_toll_free'],
		'L_CONTACT_US_NUMBER' => $lang['Contact_us_number']
		)
	);
	$contact = $t->parse($dbconfig['show_template_name']);
	
	
	
	
	// Start at index.php
	$t->set_template( load_template('link') );
	$t->set_vars( array(
		'LINK_URL' => 'index.php',
		'LINK_CLASS' => NULL,
		'LINK_TEXT' => $lang['Menu_home']
		)
	);
	$pagination .= $t->parse($dbconfig['show_template_name']) . $spacer;
	
	$hist_count = count($history);
	
	// $history is like $history[0][0] = 'page.php', $history[0][1] = "Page Title"; etc.
	for ( $i=0; $i<$hist_count; $i++ ) {
		if ( $i == (($hist_count)-1) ) {
			$pagination .= $history[$i][1];
		} else {
			$t->set_template( load_template('link') );
			$t->set_vars( array(
				'LINK_URL' => $history[$i][0],
				'LINK_CLASS' => NULL,
				'LINK_TEXT' => $history[$i][1]
				)
			);
			$pagination .= $t->parse($dbconfig['show_template_name']) . $spacer;
		}
	}
	
	// If the user is logged in, show them a welcome message and their user type
	if ( !empty($_SESSION) && $_SESSION['user_logged_in'] == true ) {
		$pagination .= '<br />' . $lang['Welcome_to_cfe'] . ', ' . $usercache['user_first_name'] . ' ';
		$pagination .=  $usercache['user_last_name'] . ' (' . $lang['Titles'][ ($usercache['user_type']/100) ] . ')';
	}
	
	$t->set_template( load_template('content') );
	$t->set_vars( array(
		'CONTENT_ADDITIONAL' => 'class="location"',
		'CONTENT' => $pagination
		)
	);
	$pagination = $t->parse($dbconfig['show_template_name']);
	
	return ($contact . $pagination);
}

/**
 * Loads a custom page from the database specified by $page_name.
 * Prints an error if the page name does not exist.
 *
 * @param	string	the name of the page to load
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 * @global	array	the global database configuration array
 *
 * @return	array	the page row from the database
*/
function load_page($page_name) {
	global $db, $lang, $dbconfig;
	
	if ( empty($page_name) ) {
		return false;
	}
	
	$sql = "SELECT * FROM `" . CUSTOM_PAGE . "` cp
			WHERE cp.page_name = '" . $page_name . "'
				AND cp.page_isvisible = '1'";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, sprintf($lang['Error_failed_page'], $page_name), __LINE__, __FILE__, $db->dberror(), $sql);

	$page = $db->getarray($result) or cccs_message(WARNING_MESSAGE, sprintf($lang['Error_failed_page'], $page_name) );

	$db->freeresult($result);
	
	return $page;
}

/**
 * Collects all of the variables inside of a $_REQUEST
 * type super global.
 *
 * @param	array	the superglobal to collect variables from ($_GET or $_POST)
 * @param	array	an array of keys to collect from that superglobal
 *
 * @return	array	the formatted array of variables as key/values
*/
function collect_vars($collect_from, $keys) {
	if ( !is_array($keys) ) {
		return false;
	}
	
	$formatted = array();
	
	while ( list($k, $v) = each($keys) ) {
		if ( $v == INT ) {
			$formatted[$k] = ( !empty($collect_from[$k]) ) ? intval($collect_from[$k]) : 0;
		} elseif ( $v == MIXED ) {
			$formatted[$k] = ( !empty($collect_from[$k]) ) ? $collect_from[$k] : NULL;
		}
	}
	
	reset($collect_from);
	return $formatted;
}


function parse_links($text) {
	$matches = array();
	$text = stripslashes($text);
	
	preg_match_all("#(www|http(|(s))://)[a-z0-9\.\-]+([a-z]{2,4})(\S{1,})#i", $text, $matches, PREG_SET_ORDER);
	
	for ( $i=0; $i<count($matches); $i++ ) {
		$url = trim($matches[$i][0]);
		
		// Sometimes a period comes at the end of a link
		// and we don't want to include that in the
		// actual link itself.
		if ( strrpos($url, '.') == (strlen($url)-1) ) {
			$url = substr($url, 0, strlen($url)-1);
		}
		
		$link = trim($url);
		if ( substr($url, 0, 3) == 'www' ) {
			$link = 'http://' . $url;
		}

		$final_link = '[URL=' . $link . ']' . $url . '[/URL]';
		$text = str_replace($url, $final_link, $text);
	}
	
	return $text;
}

/**
 * If a custom page does not contain any HTML, it can be parsed. $page_array
 * contains the information about the page, the text, if it uses HTML, etc.
 * The order that things are parsed in a page makes a difference as well.
 *
 * @param	string	the string to be parsed as a page
 *
 * @global	object	the global template handle
 * @global	array	the global database configuration array
 *
 * @return	string	the parsed string as HTML
*/
function parse_page($page) {
	global $t, $dbconfig, $lang;
	
	if ( empty($page) ) {
		return false;
	}
	
	$urls = array();
	$images = array();
	
	// Strip out all [URL]XXX[/URL] tags only.
	// Not [URL=AAA]XXX[/URL] tags.
	//$page = preg_replace("/\[URL\](.*)\[\/URL\]/i", "\\1", $page);
	
	
	$page = stripslashes($page);
	
	// Do all of the inline replaces
	$inline_searches = array("/\[(B|b)\](.*)\[\/(B|b)\]/U", "/\[(I|i)\](.*)\[\/(I|i)\]/U", "/\[(U|u)\](.*)\[\/(U|u)\]/U");
	$inline_replaces = array("<strong>\\2</strong>", "<em>\\2</em>", "<u>\\2</u>");
	$page = preg_replace($inline_searches, $inline_replaces, $page);
	
	// Do all of the paragraph replacing. 
	$page = '<p>' . $page . '</p>';
	$page = str_replace("\n\n", '</p><p>', $page);
	$page = str_replace('<p></p>', '', $page);
	
	$page = preg_replace("/(\[URL=(.*)\])(.*)(\[\/URL\])/iU", '<a href="\\2">\\3</a>', $page);

	@preg_match_all("/\[IMG(.*)\](.*)\[\/IMG\]/iU", $page, $images, PREG_SET_ORDER);
	
	for ( $i=0; $i<count($images); $i++ ) {
		$t->set_template( load_template('image') );
		$t->set_vars( array(
			'BASE_IMAGE_DIRECTORY' => NULL,
			'IMAGE_SOURCE' => stripslashes($images[$i][2]),
			'IMAGE_DESCRIPTION' => $lang['Image'],
			'IMAGE_OTHER' => $images[$i][1]
			)
		);
		$img = $t->parse(false);
		
		$page = str_replace($images[$i][0], $img, $page);
	}
	
	$page = str_replace("\n", '[BR]', $page);
	$page = preg_replace('/\[BR\]/i', '<br />', $page);
	
	return $page;
}

/**
 * Loads an image from the database specified by $image_id. This
 * function is deprecated as of 12.19.2005.
 *
 * @param	int		the ID of the image to load
 *
 * @global	object	the global database handle
 * @global	object	the global template handle
 * @global	array	the global database configuration
 * @global	array	the currently loaded language array
 *
 * @return	string	the parsed HTML image tag
*/
function load_image($image_id, $additional_style = NULL) {
	global $db, $t, $dbconfig, $lang;
	
	// Data check
	if ( !is_numeric($image_id) || $image_id <= 0 ) {
		cccs_message(WARNING_CRITICAL, $lang['Error_bad_id']);
	}
	
	$sql = "SELECT * FROM `" . IMAGE . "` i
			WHERE i.image_id = '" . $image_id . "'";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	$image = $db->getarray($result) or cccs_message(WARNING_MESSAGE, sprintf($lang['Error_failed_image'], $image_id) );

	$image_style = $image['image_style'];
	
	// Possible positions are left, right, and middle
	if ( !empty($image['image_position']) ) {
		$image_float = '; float: ' . $image['image_position'];
	
		// If there's a float and a semi-colon at the end of the 
		// style, strip it out so there aren't double semi-colons
		$image_style = strip_last_semicolon($image_style);
	}
	
	if ( !empty($additional_style) ) {
		// Get rid of those hanging semi-colons as well
		$additional_style = strip_last_semicolon($additional_style);
		
		$image_style .= '; ' . $additional_style;
	}
	
	$t->set_template( load_template('image') );
	$t->set_vars( array(
		'IMAGE_ID' => $image['image_id'],
		'IMAGE_DESCRIPTION' => stripslashes($image['image_description']),
		'IMAGE_STYLE' => $image_style . $image_float
		)
	);
	$image_src = $t->parse($dbconfig['show_template_name']);
	
	$db->freeresult($result);
	unset($image);
	
	return $image_src;
}

/**
 * Loads a users style from the database as specified by $user_style_id.
 *
 * @param	int		the ID of the style to load
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 *
 * @return	array	the style row from the database
*/
function load_style() {
	global $db, $lang, $usercache;
		
	$sql = "SELECT u.user_style_color, u.user_style_font, u.user_style_font_size FROM `" . USER . "` u 
			WHERE u.user_id = '" . $usercache['user_id'] . "'";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	$style = $db->getarray($result) or cccs_message(WARNING_MESSAGE, $lang['Error_failed_style']);
	
	$db->freeresult($result);
	
	return $style;
}

/**
 * Sets the $_SESSION array.
 *
 * @param	array	the user data from the database to add to the session
 *
 * @return	bool	returns true always
*/
function set_session($user_data) {
	if ( empty($user_data) || !is_array($user_data) ) {
		return false;
	}
	
	while ( list($key, $value) = each($user_data) ) {
		$_SESSION[$key] = $value;
	}
	
	$_SESSION['user_logged_in'] = true;
	
	return true;
}

/**
 * Updates the $_SESSION array, called on each page.
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 *
 * @return	array	the new database row array
*/
function update_session() {
	global $db, $lang;
	
	$sql = "SELECT u.user_id, u.user_region_id, u.user_type,
					u.user_authorized, u.user_name, u.user_password, 
					u.user_email, u.user_first_name, u.user_last_name, 
					u.user_language 
			FROM `" . USER . "` u 
			WHERE u.user_id = '" . $_SESSION['user_id'] . "'";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	$user = $db->getarray($result) or cccs_message(WARNING_MESSAGE, $lang['Error_failed_user']);
	
	set_session($user);
	
	$db->freeresult($result);
	return $user;
}

/**
 * Redirects a user to the page specified by $url.
 *
 * @param	string	the URL to go to.
 *
 * @global	object	the global database handle
 * @global	string	the base site URL from the config file
 * @global	string	the protocol the site is using from the config file
 * @global	string	the base directory of the site from the config file
*/
function redirect($url) {
	global $db, $site_url, $site_protocol, $site_basedir;
	
	if ( !empty($db) ) {
		$db->disconnect();
	}
	
	// see if there is an end slash on the site url
	if ( $site_url{strlen($site_url)-1} == '/' || $site_url{strlen($site_url)-1} == '\\' ) {
		$site_url = substr($site_url, 0, strlen($site_url)-1);
	}
	
	if ( !empty($site_basedir) ) {
		$site_basedir .= '/';
	}
	
	// make sure the protocol is good
	if ( empty($site_protocol) ) {
		$site_protocol = "http://";
	}
	
	if ( $site_protocol != "http://" && $site_protocol != "https://" ) {
		$site_protocol = "http://";
	}

	header('Location: ' . $site_protocol . $site_url . '/' . $site_basedir . $url);
	exit;
}

/**
 * Makes a drop down list.
 *
 * @param	string	the name of select box
 * @param	array	the array of values for the select box
 * @param	array	the array of text for the select box
 * @param	string	the default selected option for the select box
 *
 * @global	object	the global database handle
 * @global	object	the global template handle
 * @global	array	the currently loaded language array
 * @global	array	the configuration array from the database
 *
 * @return	string	the HTML for the select box
*/
function make_drop_down($select_name, $option_list_value, $option_list_text, $selected_option = NULL, $select_onchange = NULL, $select_id = NULL) {
	global $db, $t, $lang, $dbconfig;
	
	$options = NULL;
	
	for ( $i=0; $i<count($option_list_value); $i++ ) {
		$t->set_template( load_template('form_option') );

		if ( $option_list_value[$i] == $selected_option ) {
			$t->set_vars( array(
				'OPTION_VALUE' => $option_list_value[$i], 
				'OPTION_TEXT' => $option_list_text[$i],
				'OPTION_SELECTED' => 'selected="selected"'
				)
			);
		} else {
			$t->set_vars( array(
				'OPTION_VALUE' => $option_list_value[$i],
				'OPTION_TEXT' => $option_list_text[$i],
				'OPTION_SELECTED' => NULL
				)
			);
		}
		
		$options .= $t->parse();
	}

	$t->set_template( load_template('form_select') );
	$t->set_vars( array(
		'SELECT_NAME' => $select_name,
		'SELECT_OPTIONS' => $options,
		'SELECT_ONCHANGE' => $select_onchange,
		'SELECT_ID' => $select_id
		)
	);
	$select = $t->parse($dbconfig['show_template_name']);
	
	unset($options);
	
	return $select;
}

/**
 * Returns all regions, via reference
 *
 * @param	array	the array that holds each region ID
 * @param	array	the array that holds each region name
 * @param	boolean	whether or not to allow the region lists to have the registratable events or not
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 *
 * @return	boolean	always returns true
*/
function get_regions(&$region_ids, &$region_names, $allow_registration = true) {
	global $db, $lang;
	
	if ( $allow_registration == false ) {
		$sql = "SELECT * FROM `" . REGION . "` r 
				WHERE r.region_isvisible = '1'
					AND r.region_allow_registration = '1'
					ORDER BY r.region_sortorder, r.region_name ASC";
	} else {
		$sql = "SELECT * FROM `" . REGION . "` r 
				WHERE r.region_isvisible = '1'
					ORDER BY r.region_sortorder, r.region_name ASC";
	}
	
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	while ( $region = $db->getarray($result) ) {
		$region_ids[] = $region['region_id'];
		$region_names[] = $region['region_name'];
	}
	
	return true;
}

/**
 * Returns the region name by region ID
 *
 * @param	int		the ID of the region to get the name of
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 *
 * @return	string	the region name
*/
function get_region_name($region_id) {
	global $db, $lang;

	// Data check
	if ( !is_numeric($region_id) || $region_id <= 0 ) {
		cccs_message(WARNING_CRITICAL, $lang['Error_bad_id']);
	}
	
	$sql = "SELECT r.region_name FROM `" . REGION . "` r
			WHERE r.region_isvisible = '1'
				AND r.region_id = '" . $region_id . "'";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	$region = $db->getarray($result) or cccs_message(WARNING_MESSAGE, $lang['Error_failed_region']);
	
	return $region['region_name'];
}

/**
 * Returns months from the language file as arrays of keys and values.
 *
 * @param	array	the keys for the months
 * @param	array	the values of each months
 *
 * @global	array	the currently loaded language array
 *
 * @return	boolean	always returns true
*/
function make_month_array(&$month_keys, &$month_values) {
	global $lang;
	
	$month_keys = array();
	$month_values = array();
	
	for ( $i=0; $i<count($lang['Months']); $i++ ) {
		$month_keys[] = ($i+1);
		$month_values[] = $lang['Months'][$i];
	}
	
	return true;
}

/**
 * Returns an array of days from day 1 to $end
 *
 * @param	int		the day to stop on, default is 31
 *
 * @return	array	the array of days
*/
function make_day_array($end = 31) {
	$days = array();
	for ($i=0; $i<$end; $i++) {
		$days[$i] = $i+1;
	}
	
	return $days;
}

/**
 * Returns an array of years from the current year to $num_years in the future.
 *
 * @param	int		the number of years in the future to make the array
 *
 * @return	array	the array of years
*/
function make_year_array($num_years = 10, $start_at = 2004) {
	$current_year = $start_at; //(date("Y", CCCSTIME)-1);
	$years = array();
	for ($i=0; $i<$num_years; $i++) {
		$years[$i] = $current_year;
		$current_year++;
	}
	
	return $years;
}

/**
 * Makes two arrays for a time drop down list, one with the keys and one with the string values.
 *
 * @param	array	the array of time keys
 * @param	array	the array of time values
 *
 * @return	boolean	always returns true
 *
*/
function make_time_array(&$time_keys, &$time_values) {
	$times = array();
	$time_keys = array();
	$time_values = array();
	
	for ( $i=0; $i<11; $i++ ) {
		$time_keys[$i] = ($i+1);
		$time_values[$i] = ($i+1).'AM';
	}
	
	for ( $i=11; $i<24; $i++ ) {
		$time_keys[$i] = ($i+1);
		if ( $i == 23 ) {
			$time_values[$i] = (($i+1)-12).'AM';
		} elseif ( $i == 11 ) {
			$time_values[$i] = ($i+1).'PM';
		} else {
			$time_values[$i] = (($i+1)-12).'PM';
		}
	}
	
	return true;
}

/**
 * Makes a fake event ID string to make it easier for people to remember
 * their requests. For some reason remembering a 4 or 5 digit number
 * is harder than memorizing some letters and numbers.
 *
 * @param	int		the ID to make the string out of
 *
 * @return	string	returns the event number string
*/
function make_fake_event_id($id) {
	// Data check
	if ( !is_numeric($id) || $id <= 0 ) {
		cccs_message(WARNING_CRITICAL, $lang['Error_bad_id']);
	}
	
	$event_number = "ER-000000";

	$location = ( strlen($event_number) - strlen($id) );
	$event_number = substr_replace($event_number, $id, $location, strlen($id) );
	
	return $event_number;
}

/**
 * Returns all of the regional directors from a specific region
 *
 * @param	int		the ID of the region to get the directors from
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 *
 * @return	array	the 3D array of regional directors
*/
function get_region_directors($region_id) {
	global $db, $lang;
	
	// Data check
	if ( !is_numeric($region_id) || $region_id <= 0 ) {
		cccs_message(WARNING_CRITICAL, $lang['Error_bad_id']);
	}
	
	$user_data = array();
	
	$sql = "SELECT u.user_email, u.user_first_name, u.user_last_name, u.user_phone_number_work FROM `" . USER . "` u 
			WHERE u.user_region_id = '" . $region_id . "'
				AND u.user_type = '" . REGIONAL_DIRECTOR . "'";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	while ( $user = $db->getarray($result) ) {
		$user_data[] = $user;
	}
	
	return $user_data;
}

/**
 * Sends an email via the mail() function.
 *
 * @param	string	the person the mail is being sent to
 * @param	string	the subject of the email
 * @param	string	the message of the email
 * @param	string	additional headers to send
 *
 * @global	array	the currently loaded language array
 *
 * @return	boolean	always returns true
*/
function send_email($email_to, $email_subject, $email_message, $email_headers = NULL) {
	global $lang;
	
	$sent_mail = false;
	
	if ( empty($mail_headers) ) {
		$email_headers = "From: " . EMAIL_FROM_NAME . "\r\nReply-To: " . EMAIL_FROM_ADDRESS . "\r\n";
	}
	
	$email_to = trim($email_to);
	$email_subject = trim($email_subject);
	
	$sent_mail = mail($email_to, $email_subject, $email_message, $email_headers);
	
	if ( $sent_mail == false ) {
		cccs_message(WARNING_MESSAGE, $lang['Error_failed_email'], __LINE__, __FILE__);
	}
	
	return true;
}

/**
 * Returns the strings Yes or No depending on the value
 *
 * @param	int		the value to determine if its true or false
 *
 * @global	array	the currently loaded language array
 *
 * @return	string	returns Yes or No depending on the value
*/
function yes_no($value) {
	global $lang;
	
	return (intval($value) == 1 ? $lang['Yes'] : $lang['No']);
}

/**
 * Generates a random password of $digits characters.
 * Taken from php.net.
 *
 * @param	int		the length of the password
 * @param	boolean	if 'l' or 'i' should be replaced with 1 and 'o' replaced with 0
 * @param	string	convert to Uppercase or Lowercase 'U' or 'L'
 *
 * @return	string	the new password
*/
function generate_password($digits, $c, $st) {
	$pwd = NULL;
	$o = NULL;

	for ($x = 0; $x < $digits; ) {
		$y = rand(1, 1000);
		if ( $y > 350 && $y < 601) { $d = chr( rand(48,57) ); }
		if ( $y < 351 ) { $d = chr( rand(65,90) ); }
		if ( $y > 600 ) { $d = chr( rand(97,122) ); }
		if ( $d != $o ) { $o = $d; $pwd .= $d; $x++; }
	}
	
	if ( $c == true ) {
		$pwd = eregi_replace("(l|i)","1",$pwd);
		$pwd = eregi_replace("(o)","0",$pwd);
	}
	
	if ( $st == 'L' ) { $pwd = strtolower($pwd); }
	if ( $st == 'U' ) { $pwd = strtoupper($pwd); }
	
	return $pwd;
}

/**
 * Makes an HTML input box.
 *
 * @param	string	the type of input box
 * @param	string	the name of the input box
 * @param	string	the value of the input box, default null
 *
 * @global	object	the global template handle
 * @global	array	the global database configuration array
 *
 * @return	string	the HTML input box
*/
function make_input_box($input_type, $input_name, $input_value = NULL, $input_other = NULL) {
	global $t, $dbconfig;
	
	$t->set_template( load_template('form_input') );
	$t->set_vars( array(
		'INPUT_TYPE' => $input_type,
		'INPUT_NAME' => $input_name,
		'INPUT_VALUE' => $input_value,
		'INPUT_OTHER' => $input_other
		)
	);
	$input = $t->parse($dbconfig['show_template_name']);
	
	return $input;
}

/**
 * Makes an HTML textarea.
 *
 * @param	string	the name of the textarea
 * @param	int		the number of rows of the textarea
 * @param	int		the number of columns of the textarea
 * @param	string	the value of the textarea, default null
 *
 * @global	object	the global template handle
 * @global	array	the global database configuration array
 *
 * @return	string	the HTML textarea
*/
function make_textarea($ta_name, $ta_rows, $ta_cols, $ta_value = NULL) {
	global $t, $dbconfig;
	
	$t->set_template( load_template('form_textarea') );
	$t->set_vars( array(
		'TEXTAREA_NAME' => $ta_name,
		'TEXTAREA_ROWS' => $ta_rows,
		'TEXTAREA_COLS' => $ta_cols,
		'TEXTAREA_VALUE' => stripslashes($ta_value)
		)
	);
	$textarea = $t->parse($dbconfig['show_template_name']);
	
	return $textarea;
}

/**
 * Returns the sum of all of the elements of an array.
 *
 * @param	array	the array to be summed
 *
 * @return	int		the sum of the array
*/
function array_count($array) {
	if ( !is_array($array) || count($array) == 0 ) {
		return 0;
	}
	
	$sum = 0;
	
	for ( $i=0; $i<count($array); $i++ ) {
		$sum += $array[$i];
	}
	
	return $sum;
}

/**
 * Escapes a string, this function is somewhat incomplete
 *
 * @param	string	the string to strip
 *
 * @return	string	the stripped string
*/
function strip_bad_quotes($string) {
	if ( empty($string) ) {
		return false;
	}
	
	$string = str_replace("\"", "&quot;", $string);
	
	return $string;
}

/**
 * Makes a link with specified URL and text.
 *
 * @param	string	the link URL
 * @param	string	the link text
 *
 * @global	object	the global template object
 * @global	array	the database configuration
 *
 * @return	string	the link HTML
*/
function make_link($link_url, $link_text, $link_additional = NULL) {
	global $t, $dbconfig;
	
	$t->set_template( load_template('link') );
	$t->set_vars( array(
		'LINK_URL' => $link_url,
		'LINK_TEXT' => $link_text,
		'LINK_ADDITIONAL' => $link_additional
		)
	);
	return $t->parse($dbconfig['show_template_name']);
}

/**
 * Returns the staff information by staff member ID. 
 *
 * @param	int		the region ID the staff member belongs to
 * @param	int		the staff ID the staff member is
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 *
 * @return	array	the staff members information
*/
function get_staff_data($region_id, $staff_id) {
	global $db, $lang;
	
	$sql = "SELECT * FROM `" . STAFF . "` s 
			WHERE s.staff_id = '" . $staff_id . "'
				AND s.staff_region_id = '" . $region_id . "'";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	$staff = $db->getarray($result) or cccs_message(WARNING_MESSAGE, $lang['Error_failed_data']);
	
	$db->freeresult($result);
	
	return $staff;
}

/**
 * Returns HTMLized content from that template
 *
 * @param	string	the content to print to the screen
 *
 * @global	object	the global template handle
 *
 * @return	string	HTMLized content
*/
function make_content($content_text) {
	global $t;
	
	$t->set_template( load_template('content') );
	$t->set_vars( array(
		'CONTENT' => $content_text
		)
	);
	$content = $t->parse($dbconfig['show_template_name']);
	
	return $content;
}


/**
 * Sends a message to a user and an email to them as well.
 *
 * @param	int		the user ID that the message is from
 * @param	int		the user ID that the message is to
 * @param	int		the UNIX timestamp date of the message
 * @param	string	the the subject of the message
 * @param	string	the the message itself
 *
 * @global	object	the global database handle
 * @global	array	the currently loaded language array
 * @global	array	the database configuration 
 *
 * @return	string	HTMLized content
*/
function send_message($from, $to, $date, $subject, $text) {
	global $db, $lang, $dbconfig;
	
	if ( empty($date) || empty($subject) || empty($text) ) {
		return false;
	}
	
	// This inserts the message into the the cccs_message 
	// table saying a new message has been created.
	$sql = "INSERT INTO `" . MESSAGE . "`(message_id,message_from_user_id, message_to_user_id, 
				message_date, message_type, message_subject) 
			VALUES(NULL, '" . $from . "', '" . $to . "', 
				'" . $date . "', '0', '" . $subject . "')";
	$db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dbquery(), $sql);
	
	// Get it's ID so we can add two more items to the cccs_message_text
	// table, one for the sent message and one from the to message.
	$messageid = $db->insertid();
	$sql = "INSERT INTO `" . MESSAGE_TEXT . "`(text_id, text_message_id, text_type, 
				text_content)
			VALUES(NULL, '" . $messageid . "', '0', '" . $text . "')";
	$db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dbquery(), $sql);
	
	$sql = "INSERT INTO `" . MESSAGE_TEXT . "`(text_id, text_message_id, text_type, 
				text_content)
			VALUES(NULL, '" . $messageid . "', '1', '" . $text . "')";
	$db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dbquery(), $sql);
	
	// Send out an email
	$u = array();
	$u = get_user_data($to);
	
	if ( $dbconfig['send_email'] == 1 ) {
		send_email($u['user_email'], $lang['Email_new_message_subject'], $lang['Email_new_message_message']);
	}
		
	return true;
}

function validate_date($month, $day, $year) {
	if ( is_numeric($month) && $month > 0 && $month < 13 ) {
		if ( is_numeric($day) && $day > 0 && $day < 32 ) {
			if ( is_numeric($year) && $year > 1970 && $year < 2038 ) {
				return true;
			}
		}
	}
	
	return false;
}


/// UNFINISHED FUNCTION!!!! ///
function make_nav_bits($current_page, $num_pages, $per_page) {
	global $t, $lang, $dbconfig;
	
	for ( $i=1; $i<=$num_pages; $i++ ) {
		if ( $i == $current_page ) {
			$t->set_template( load_template('nav_bit_item_current') );
		} else {
			$t->set_template( load_template('nav_bit_item') );
		}
		
		$t->set_vars( array(
			'PAGE_NUM' => $i,
			'PER_PAGE' => $per_page
			)
		);
		$nav_bits .= $t->parse($dbconfig['show_template_name']);
	}
	
	$t->set_template( load_template('nav_bit_item_last') );
	$t->set_vars( array(
		'L_LAST' => $lang['Last'],
		'PAGE_NUM' => $num_pages
		)
	);
	$nav_bits .= $t->parse($dbconfig['show_template_name']);
	
	$t->set_template( load_template('nav_bit') );
	$t->set_vars( array(
		'L_PAGE' => $lang['Page'],
		'L_OF' => $lang['Of'],
		'PAGE_NUM' => $current_page,
		'TOTAL_PAGES' => $num_pages,
		'NAV_BITS' => $nav_bits
		)
	);
	$nav = $t->parse($dbconfig['show_template_name']);
	
	return $nav;
}

function clean_text($text, $split = false) {
	if ( empty($text) ) {
		return false;
	}

	// Replace all smart quotes
	$smart_open = chr(147);
	$smart_close = chr(148);
	$text = preg_replace('/' . $smart_open . '|' . $smart_close . '/', "\"", $text);
	
	// Now go thru each character of the text and if it
	// is > 31 or < 127, add it to the final string
	$final_text = NULL;
	for ( $i=0; $i<strlen($text); $i++ ) {
		if ( ord($text{$i}) == 10 || (ord($text{$i}) > 31 && ord($text{$i}) < 127) ) {
			$final_text .= $text{$i};
		}
	}
	
	if ( $split == true ) {
		$final_text = chunk_split($final_text, 50);
	}
	
	return $final_text;
}

function strip_last_semicolon($text) {
	if ( empty($text) ) {
		return false;
	}
	
	if ( $text{strlen($text)-1} == ';' ) {
		$text = substr($text, 0, strlen($text)-1);
	}
	
	return $text;
}

// From developer.com
function validate_email($email) {
	if ( empty($email) ) {
		return false;
	}
	
	$regexp = "^([_a-z0-9-]+)(\.[_a-z0-9-]+)*@([a-z0-9-]+)(\.[a-z0-9-]+)*(\.[a-z]{2,4})$";
	$mx = array();
	
	$valid = false;
	if ( eregi($regexp, $email) ) {
		$valid = true;
	} else {
		$valid = false;
	}
	
	return $valid;
}

// From: http://benramsey.com/2004/03/02/making-it-valid-telephone-numbers/
// Format: Standard US formats
function validate_phone_number($number) {
	// Rather than checking on every page,
	// if we're just given a blank number,
	// evaluate it as true since phone numbers are never
	// required, and if they are, then they'll be required
	// on each individual page.
	if ( empty($number) ) {
		return true;
	}
	
	$regexp = "/^[(]?(\d{0,3})[)]?[\s]?[-|.]?(\d{3})[\s]?[-|.]?(\d{4})[\s]?[x]?(\d*)$/";
	
	$valid = false;
	if ( preg_match($regexp, $number) ) {
		$valid = true;
	}
	
	return $valid;
}

// Creates an array for different response types depending on the table passed
// to the function for the program tracking. Not my favorite function, but works
// quickly.
function make_response_array($table, &$ids, &$values) {
	global $db, $lang;
	
	$sql = "SELECT * FROM `" . $table . "`";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dbquery(), $sql);
	
	while ( $r = $db->getarray($result) ) {
		$ids[] = current($r);
		next($r);
		$values[] = current($r);
	}
	
	$db->freeresult($result);
}

function get_programs(&$program_ids, &$program_names, $include_report = true, $include_bankruptcy = true) {
	global $db, $lang;
	
	$include_report_sql = $include_report == false ? "AND p.program_include_report = '1'" : NULL;
	$include_bankruptcy_sql = $include_bankruptcy == false ? "AND p.program_include_bankruptcy = '0'" : NULL;
	
	$sql = "SELECT * FROM `" . PROGRAM . "` p 
			WHERE 1
			" . $include_report_sql . "
			" . $include_bankruptcy_sql . "
				ORDER BY p.program_sortorder ASC";
	$result = $db->dbquery($sql) or cccs_message(WARNING_CRITICAL, $lang['Error_failed_query'], __LINE__, __FILE__, $db->dberror(), $sql);
	
	while ( $p = $db->getarray($result) ) {
		$program_ids[] = $p['program_id'];
		$program_names[] = $p['program_name'];
	}
	
	return true;
}

function collect_viewevents($viewevents) {
	// Set up the initial event pagination
	switch ($viewevents) {
		case 'default': { $numdays = 30; break; }
		case 'next30': { $numdays = 60; break; }
		case 'next90': { $numdays = 90; break; }
		case 'next180': { $numdays = 180; break; }
		case 'nextyear': { $numdays = 365; break; }
		case 'allevents': { $numdays = $viewevents; break; }
		default: { $numdays = 30; break; }
	}

	return $numdays;
}

?>